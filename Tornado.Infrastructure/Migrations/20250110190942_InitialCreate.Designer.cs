// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tornado.Infrastructure.Data;

#nullable disable

namespace Tornado.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20250110190942_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tornado.Domain.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.ChannelModels.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelAvatarSourceUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ChannelHeaderSourceUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Channels", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.ChannelModels.ChannelMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("ChannelMetrics", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.CommentRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RatingType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserRatingsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserRatingsId");

                    b.ToTable("CommentRatings", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserComments", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserCommentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserRatingsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.HasIndex("UserCommentsId")
                        .IsUnique();

                    b.HasIndex("UserRatingsId")
                        .IsUnique();

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserRatings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserRatings", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("PreviewSourceUrl")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<string>("SourceFileName")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentChainId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsReply")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RepliesTo")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<Guid>("UserCommentsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentChainId");

                    b.HasIndex("UserCommentsId");

                    b.ToTable("VideoComments", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoCommentChain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoCommentChains", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("AverageViewsPerUniqueViewer")
                        .HasColumnType("bigint");

                    b.Property<double>("AverageWatchPercentage")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("AverageWatchTime")
                        .HasColumnType("interval");

                    b.Property<long>("TotalLikes")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalViews")
                        .HasColumnType("bigint");

                    b.Property<long>("UniqueViewersCount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("VideoMetrics", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("RatingType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserRatingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserRatingsId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoRatings", (string)null);
                });

            modelBuilder.Entity("Tornado.Domain.Models.Auth.User", b =>
                {
                    b.HasOne("Tornado.Domain.Models.ProfileModels.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("Tornado.Domain.Models.Auth.User", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Tornado.Domain.Models.ChannelModels.ChannelMetrics", b =>
                {
                    b.HasOne("Tornado.Domain.Models.ChannelModels.Channel", "Channel")
                        .WithOne("Metrics")
                        .HasForeignKey("Tornado.Domain.Models.ChannelModels.ChannelMetrics", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Tornado.Domain.Models.CommentRating", b =>
                {
                    b.HasOne("Tornado.Domain.Models.VideoModels.VideoComment", "Comment")
                        .WithMany("CommentRatings")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tornado.Domain.Models.ProfileModels.UserRatings", "UserRatings")
                        .WithMany("CommentRatings")
                        .HasForeignKey("UserRatingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserProfile", b =>
                {
                    b.HasOne("Tornado.Domain.Models.ChannelModels.Channel", "Channel")
                        .WithOne("Profile")
                        .HasForeignKey("Tornado.Domain.Models.ProfileModels.UserProfile", "ChannelId");

                    b.HasOne("Tornado.Domain.Models.ProfileModels.UserComments", "UserComments")
                        .WithOne("Profile")
                        .HasForeignKey("Tornado.Domain.Models.ProfileModels.UserProfile", "UserCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tornado.Domain.Models.ProfileModels.UserRatings", "UserRatings")
                        .WithOne("Profile")
                        .HasForeignKey("Tornado.Domain.Models.ProfileModels.UserProfile", "UserRatingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("UserComments");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.Video", b =>
                {
                    b.HasOne("Tornado.Domain.Models.ChannelModels.Channel", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoComment", b =>
                {
                    b.HasOne("Tornado.Domain.Models.VideoModels.VideoCommentChain", "CommentChain")
                        .WithMany("VideoComments")
                        .HasForeignKey("CommentChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tornado.Domain.Models.ProfileModels.UserComments", "UserComments")
                        .WithMany("VideoComments")
                        .HasForeignKey("UserCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentChain");

                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoCommentChain", b =>
                {
                    b.HasOne("Tornado.Domain.Models.VideoModels.Video", "Video")
                        .WithMany("VideoCommentChains")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoMetrics", b =>
                {
                    b.HasOne("Tornado.Domain.Models.VideoModels.Video", "Video")
                        .WithOne("Metrics")
                        .HasForeignKey("Tornado.Domain.Models.VideoModels.VideoMetrics", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoRating", b =>
                {
                    b.HasOne("Tornado.Domain.Models.ProfileModels.UserRatings", "UserRatings")
                        .WithMany("VideoRatings")
                        .HasForeignKey("UserRatingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tornado.Domain.Models.VideoModels.Video", "Video")
                        .WithMany("VideoRatings")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRatings");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Tornado.Domain.Models.ChannelModels.Channel", b =>
                {
                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserComments", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("VideoComments");
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserProfile", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Tornado.Domain.Models.ProfileModels.UserRatings", b =>
                {
                    b.Navigation("CommentRatings");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("VideoRatings");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.Video", b =>
                {
                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("VideoCommentChains");

                    b.Navigation("VideoRatings");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoComment", b =>
                {
                    b.Navigation("CommentRatings");
                });

            modelBuilder.Entity("Tornado.Domain.Models.VideoModels.VideoCommentChain", b =>
                {
                    b.Navigation("VideoComments");
                });
#pragma warning restore 612, 618
        }
    }
}
